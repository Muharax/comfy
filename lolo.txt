slick carousel 
===============
1 - npm install react-slick --save
2 - npm install slick-carousel --save
3 - after install it put this of top of page 
    [
        import Slider from "react-slick";
        import "slick-carousel/slick/slick.css";
        import "slick-carousel/slick/slick-theme.css";
    ]

NOTE : in order to make the slider item in the middle of container we should use this code[
    
.slick-slide > div {
    margin: 0 10px; 
  }
  .slick-list {
    margin: 0 -10px; 
  }
]   
 ==============================================


 
 when we need to use [uselocation] hook in [App.js] , there is an error in console says 
 [useLocation() may be used only in the context of a Router component]
 in order to solve this we should be sure if [HashRouter or BrouwserRouter] inside [App.js],if exidt inside [App.js]
 we should move [HashRouter or BrouwserRouter] to [index.js] like this :

import React from 'react';
import { HashRouter} from "react-router-dom";
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';  
 

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <HashRouter>  // use it here in order to avoid the error in console
          <App /> 
    </HashRouter>
  </React.StrictMode>
); 








 ==============================================

when we make a form , there is a render show every time in console,if we need to avoid this render there are 2 methods:

*the first method is use the ref for element like this :
========================================================

const [registerUName,setRegisterUName]=useState("");
const registerUNameRef = useRef(); 

const handleRegisterSubmit =(e)=>{
    e.preventDefault();
    console.log(registerUNameRef);
    const data = new FormData(e.target);
    console.log(Object.fromEntries(data.entries()));
}

<form onSubmit={handleRegisterSubmit}>
//use ref here and setRegisterUName
<input type="text" ref={registerUNameRef} onChange={(e)=> setRegisterUName(e.target.value)}/>
</form>


*the second method is use the [FormData obj] like this :
========================================================

<form onSubmit={handleRegisterSubmit}>
//without [use ref or setRegisterUName]
<input type="text"/>
</form>

const handleRegisterSubmit =(e)=>{
    e.preventDefault(); 
    const data = new FormData(e.target);//we make instance of [FormData]

    //this in order to access the values of all inputs value,by access the entries form [data]
    console.log(Object.fromEntries(data.entries()));
}

=====================================
in order to avoid to write usestate for every input like this :
const [registerUName,setRegisterUName]=useState("");
const [registerEmail,setRegisterEmail]=useState("");
const [registerPass,setRegisterPass]=useState("");
const [registerCpass,setRegisterCpass]=useState("");

we should make an usestate obj like this :
const [values, setValues] = useState({
    r_userN: "",
    r_userEmail: "",
    r_userPass: "",
    r_userCpass: ""
});

in order to empty all inputs after submit form we should make the following:
*first of all we should put [value] in every input ,that value is the same in obj like this :

//this is the obj that contain all input value
const [values, setValues] = useState({
    r_userN: "",
    r_userEmail: "",
    r_userPass: "",
    r_userCpass: ""
});

<form onSubmit={handleRegisterSubmit} noValidate> 
<input type="text" value={values.r_userN}/>///daroriiiiii exist value in input
<input type="email" value={values.r_userEmail}/>
<button></button>
</form> 


   const handleRegisterSubmit = (e) =>{
     setValues({
            r_username: "",
            r_email: "",
            r_pass: "",
            r_Cpass: ""

          });
   }


 ================================
 const RequirAuth = ({ children }) => {

    const { existUser } = useContext(AuthContext);

    const location = useLocation();

    // if no user or logout the user
    if (!existUser) {

        return <Navigate to="/" state={{ path: location.pathname }} />

    }

    return children;

}


 








  

